global_defs {
    enable_script_security
    script_user root
    max_auto_priority -1
    vrrp_garp_master_refresh 60
}

# These are separate checks to provide the following behavior:
# If the loadbalanced endpoint is responding then all is well regardless
# of what the local api status is. Both checks will return success and
# we'll have the maximum priority. This means as long as there is a node
# with a functional loadbalancer it will get the VIP.
# If all of the loadbalancers go down but the local api is still running,
# the _both check will still succeed and allow any node with a functional
# api to take the VIP. This isn't preferred because it means all api
# traffic will go through one node, but at least it keeps the api available.
vrrp_script chk_ocp_lb {
    script "/usr/bin/timeout 1.9 /etc/keepalived/chk_ocp_script.sh"
    interval 2
    weight 20
    rise 3
    fall 2
}

vrrp_script chk_ocp_both {
    script "/usr/bin/timeout 1.9 /etc/keepalived/chk_ocp_script_both.sh"
    interval 2
    # Use a smaller weight for this check so it won't trigger the move from
    # bootstrap to master by itself.
    weight 5
    rise 3
    fall 2
}

# TODO: Improve this check. The port is assumed to be alive.
# Need to assess what is the ramification if the port is not there.
vrrp_script chk_ingress {
    script "/usr/bin/timeout 0.9 /usr/bin/curl -o /dev/null -Lfs http://localhost:1936/healthz/ready"
    interval 1
    weight 20
    rise 3
    fall 2
}

vrrp_script chk_default_ingress {
    script "/usr/bin/timeout 4.9 /etc/keepalived/chk_default_ingress.sh"
    interval 5
    weight 50
    rise 3
    fall 2
}

{{$nonVirtualIP := .NonVirtualIP}}

vrrp_instance {{ .Cluster.Name }}_API {
    state BACKUP
    interface br-ex
    virtual_router_id 116
    priority 40
    advert_int 1
    use_vmac
    {{if .EnableUnicast}}
    unicast_src_ip {{.NonVirtualIP}}
    unicast_peer {
        {{- range .LBConfig.Backends -}}
        {{- if ne $nonVirtualIP .Address}}
        {{.Address}}
        {{- end}}
        {{- end}}
    }
    {{end}}
    authentication {
        auth_type PASS
        auth_pass password
    }
    virtual_ipaddress {
        {{ .Cluster.APIVIP }}/{{ .Cluster.VIPNetmask }}
    }
    track_script {
        chk_ocp_lb
        chk_ocp_both
    }
}

vrrp_instance {{ .Cluster.Name }}_INGRESS {
    state BACKUP
    interface br-ex
    virtual_router_id 117
    priority 20
    advert_int 1
    use_vmac
    {{if .EnableUnicast}}
    unicast_src_ip {{.NonVirtualIP}}
    unicast_peer {
        {{- range .IngressConfig.Peers}}
        {{- if ne $nonVirtualIP .}}
        {{.}}
        {{- end}}
        {{- end}}
    }
    {{end}}
    authentication {
        auth_type PASS
        auth_pass password
    }
    virtual_ipaddress {
        {{ .Cluster.IngressVIP }}/{{ .Cluster.VIPNetmask }}
    }
    track_script {
        chk_ingress
        chk_default_ingress
    }
}


vrrp_instance {{ .Cluster.Name }}_API_EXTERNAL {
    state BACKUP
    interface ens4
    virtual_router_id 118
    priority 40
    advert_int 1
    use_vmac
    {{if .EnableUnicast}}
    unicast_src_ip {{.NonVirtualIP}}
    unicast_peer {
        {{ .BootstrapIP }}
        {{range .LBConfig.Backends}}
        {{if ne $nonVirtualIP .Address}}{{.Address}}{{end}}
        {{end}}
    }
    {{end}}
    authentication {
        auth_type PASS
        auth_pass password
    }
    virtual_ipaddress {
        172.21.112.25/32
    }
}
