# Required Python packages:
#
# ansible
# openstackclient
# openstacksdk
# netaddr

- import_playbook: common.yaml

- hosts: all
  gather_facts: no

  tasks:

  - name: 'List the Server groups'
    command:
      cmd: "openstack server group list -f json -c ID -c Name"
    register: server_group_list

  - name: 'Parse the Server group ID from existing'
    set_fact:
      server_group_id: "{{ (server_group_list.stdout | from_json | json_query(list_query) | first).ID }}"
    vars:
      list_query: "[?Name=='{{ os_cp_server_group_name }}']"
    when:
    - "os_cp_server_group_name|string in server_group_list.stdout"

  - name: 'Create the Control Plane server group'
    command:
      cmd: "openstack --os-compute-api-version=2.15 server group create -f json -c id --policy=soft-anti-affinity {{ os_cp_server_group_name }}"
    register: server_group_created
    when:
    - server_group_id is not defined

  - name: 'Parse the Server group ID from creation'
    set_fact:
      server_group_id: "{{ (server_group_created.stdout | from_json).id }}"
    when:
    - server_group_id is not defined

  # - name: 'Create the Control Plane servers'
  #   os_server:
  #     name: "{{ item.1 }}-{{ item.0 }}"
  #     image: "{{ os_image_rhcos }}"
  #     flavor: "{{ os_flavor_master }}"
  #     auto_ip: no
  #     userdata: "{{ lookup('file', '../scripts/{{ cluster_name }}.{{ cluster_domain }}/{{ item.1 }}-m0{{ item.0+1 }}-ignition.json' ) | string }}"
  #     nics:
  #     - port-name: "{{ os_port_master }}-{{ item.0 }}"
  #     - port-name: "public-{{ os_port_master }}-{{ item.0 }}"
  #     - port-name: "management-{{ os_port_master }}-{{ item.0 }}"
  #     - port-name: "outbound-{{ os_port_master }}-{{ item.0 }}"
  #     scheduler_hints:
  #       group: "{{ server_group_id }}"
  #   with_indexed_items: "{{ [os_cp_server_name] * os_cp_nodes_number }}"


  - name: 'Create the Control Plane servers'
    os_server:
      name: "{{ cluster_name }}-{{ node_type }}-{{ hostname }}"
      image: "{{ os_image_rhcos }}"
      flavor: "{{ os_flavor_master }}"
      auto_ip: no
      userdata: "{{ lookup('file', '../scripts/{{ cluster_name }}.{{ cluster_domain }}/{{ cluster_name }}-{{ node_type }}-{{ hostname }}-ignition.json' ) | string }}"
      nics:
      - port-name: "{{ cluster_name }}-{{ node_type }}-{{ hostname }}-cluster"
      - port-name: "{{ cluster_name }}-{{ node_type }}-{{ hostname }}-public"
      - port-name: "{{ cluster_name }}-{{ node_type }}-{{ hostname }}-management"
      - port-name: "{{ cluster_name }}-{{ node_type }}-{{ hostname }}-outbound"
    loop: "{{ masters }}"
    loop_control:
      loop_var: node
      label: "{{ fqdn }}"
    vars:
      node_type: "master"
      hostname: "{{ node['name'] }}"
      ip_cluster: "{{ node['ip_cluster'] }}"
      fqdn: "{{ node['name'] }}.{{ cluster_domain }}"
